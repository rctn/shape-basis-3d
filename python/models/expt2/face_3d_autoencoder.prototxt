name: "Face_3D_Transformations"
layer {
  top: "input"
  name: "input"
	type: "Data"
  data_param {
    source: "/media/mudigonda/Gondor/Data/3dFace/train_input"
		backend: LEVELDB
    batch_size: 256
  }
  transform_param {
   mean_file:"/media/mudigonda/Gondor/Data/3dFace/ldb_meanfile.proto" 
  }
  include { phase: TRAIN }
}
layer {
  top: "input"
  name: "input"
	type: "Data"
  data_param {
    source: "/media/mudigonda/Gondor/Data/3dFace/test_input"
		backend: LEVELDB
    batch_size: 256
  }
  transform_param {
		mean_file:"/media/mudigonda/Gondor/Data/3dFace/ldb_meanfile.proto"
  }
  include {
    phase: TEST
  }
}
layer {
	top: "output"
	name: "output"
	type: "Data"
	data_param {
		source: "/media/mudigonda/Gondor/Data/3dFace/train_output"
		backend: LEVELDB
		batch_size: 256
	}
	transform_param {
		mean_file:"/media/mudigonda/Gondor/Data/3dFace/ldb_meanfile.proto"
	}
	include {
		phase: TRAIN
	}
}
layer {
	top: "output"
	name: "output"
	type: "Data"
	data_param {
		source: "/media/mudigonda/Gondor/Data/3dFace/test_output"
		backend: LEVELDB
		batch_size: 256
	}
	transform_param {
		mean_file:"/media/mudigonda/Gondor/Data/3dFace/ldb_meanfile.proto"
	}
	include {
		phase: TEST
	}
}
layer {
	top: "transformations"
	name: "transformations"
	type: "Data"
	data_param {
		source: "/media/mudigonda/Gondor/Data/3dFace/train_transf"
		backend: LEVELDB
		batch_size: 256
	}
	include {
		phase: TRAIN
	}
}
layer {
	top: "transformations"
	name: "transformations"
	type: "Data"
	data_param {
		source: "/media/mudigonda/Gondor/Data/3dFace/test_transf"
		backend: LEVELDB
		batch_size: 256
	}
	include {
		phase: TEST
	}
}

layer{
	name:"conv1"
	type: "Convolution"
	bottom:"input"
	top:"conv1"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 1
		decay_mult: 0
	}
	convolution_param {
		num_output: 64 
		pad: 1
		kernel_size: 3
		stride: 1
		weight_filler{
		type:"xavier"
		}
	}
}
layer{
	name:"pool1"
	type: "Pooling"
	bottom:"conv1"
	top:"pool1"
	pooling_param {
		pool:MAX
		kernel_size:3
		stride:2
	}
}
layer{
	name:"relu1"
	type:"ReLU"
	bottom:"pool1"
	top:"pool1"
}
layer{
	name:"conv2"
	type:"Convolution"
	bottom:"pool1"
	top:"conv2"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 1
		decay_mult: 0
	}
	convolution_param {
		num_output: 64 
		pad:1 
		kernel_size:3 
		stride:1
		weight_filler{
		type:"xavier"
		}
	}
}
layer{
	name:"relu2"
	type: "ReLU"
	bottom:"conv2"
	top:"conv2"
}
layer{
	name:"pool2"
	type:"Pooling"
	bottom:"conv2"
	top:"pool2"
	pooling_param{
		pool:MAX
		kernel_size:3
		stride:2
	}
}
layer{
	name:"transf_to_hidden"
	type: "InnerProduct"
	bottom:"transformations"
	top:"transf_to_hidden"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 1
		decay_mult: 0
	}
	inner_product_param{
		num_output:100 
		weight_filler{
		type:"xavier"
		}
	}
}
layer{
	name:"pool_to_hidden"
	type:"InnerProduct"
	bottom:"pool2"
	top: "pool_to_hidden"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 1
		decay_mult: 0
	}
	inner_product_param{
		num_output:1000
		weight_filler{
		type:"xavier"
		}
	}
}
layer{
	name:"hidden_to_relu"
	type:"ReLU"
	bottom:"pool_to_hidden"
	top:"pool_to_hidden"
}

layer{
	name:"concat_transf_vision"
	type:"Concat"
	bottom:"pool_to_hidden"
	bottom:"transf_to_hidden"
	top:"concat_transf_vision"
	concat_param {
		concat_dim: 1
	}
}
layer{
	name:"concat_to_relu"
	type:"ReLU"
	bottom:"concat_transf_vision"
	top:"concat_transf_vision"
}
layer{
	name:"concat_to_hidden1"
	type:"InnerProduct"
	bottom:"concat_transf_vision"
	top:"concat_to_hidden1"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 1
		decay_mult: 0
	}
	inner_product_param{
		num_output:1000
		weight_filler{
		type:"xavier"
		}
	}
}

layer{
	name:"hidden_to_output"
	type:"InnerProduct"
	bottom:"concat_to_hidden1"
	top:"hidden_to_output"
	param {
		lr_mult: 1
		decay_mult: 1
	}
	param {
		lr_mult: 1
		decay_mult: 0
	}
	inner_product_param{
		num_output:12288
		weight_filler{
		type:"xavier"
		}
	}
}
layer{
	name:"flattened_hidden_to_output"
	type:"Flatten"
	bottom: "hidden_to_output"
	top: "flattened_hidden_to_output"
}
layer{
	name:"flattened_output"
	type:"Flatten"
	bottom: "output"
	top: "flattened_output"
}
layer{
	bottom:"flattened_hidden_to_output"
	bottom:"flattened_output"
	top:"l2_error"
	name:"loss"
	type:"EuclideanLoss"
	loss_weight:.0001
}
